import { tool } from "@langchain/core/tools";
import { extractTicketId } from "./freshdeskUpdateTool";
import { z } from "zod";
import { analyzeCustomerIntent, generateProblemSummary, updateFreshdeskForCollectionChoice, updateFreshdeskForPhysicalStore, updateFreshdeskForVoucherChoice } from "../helpers/generalHelper";

const analyzeCustomerResponseSchema = z.object({
  threadId: z.string().describe("ID da thread/conversa"),
  customerResponse: z.string().describe("Resposta natural do cliente"),
  currentContext: z.enum(["joinville_store_choice", "other_region_choice"]).describe("Contexto atual da conversa"),
  customerAddress: z.object({
    street: z.string(),
    neighborhood: z.string(), 
    cep: z.string(),
    complement: z.string().optional(),
    fullAddress: z.string()
  }).describe("Endere√ßo do cliente"),
  problemTag: z.string().describe("Tag do problema"),
  customerData: z.object({
    name: z.string().optional(),
    orderNumber: z.string().optional(),
    equipmentModel: z.string().optional(),
  }).optional(),
});

export const analyzeCustomerResponseTool = tool(
  async ({ threadId, customerResponse, currentContext, customerAddress, problemTag, customerData }) => {
    console.log(`[TOOL] Analisando resposta do cliente: "${customerResponse}"`);
    console.log(`[TOOL] Contexto: ${currentContext}`);
    
    try {
      const ticketId = extractTicketId(threadId);
      const analysis = analyzeCustomerIntent(customerResponse, currentContext);
      
      if (currentContext === "joinville_store_choice") {
        // Analisar escolha para Joinville (loja f√≠sica vs coleta)
        if (analysis.acceptsPhysicalStore) {
          console.log(`[TOOL] Cliente de Joinville aceita loja f√≠sica`);
          
          // Processar loja f√≠sica
          const problemSummary = generateProblemSummary(problemTag);
          const freshdeskUpdate = await updateFreshdeskForPhysicalStore(
            ticketId, customerAddress, customerData, problemTag, problemSummary
          );

          return JSON.stringify({
            success: true,
            action: "physical_store_confirmed",
            choice: "physical_store",
            message: `‚úÖ **PERFEITO! LOJA F√çSICA CONFIRMADA**

Seu atendimento na loja est√° organizado! 

üìã **RESUMO DO SEU PROBLEMA:**
${problemSummary}

üè™ **LOJA PICHAU JOINVILLE**
üìç Rua Visconde de Taunay, 380 - Atiradores
‚è∞ Segunda a Sexta: 8h √†s 18h  
üìû (47) 3422-1234

**O que levar:**
‚úÖ Seu equipamento
‚úÖ Documento com foto
‚úÖ Nota fiscal (se tiver)

**Pr√≥ximos passos:**
‚Ä¢ Compare√ßa na loja no hor√°rio de funcionamento
‚Ä¢ Nossa equipe far√° o diagn√≥stico presencial
‚Ä¢ Voc√™ receber√° orienta√ß√µes diretas sobre o reparo

Um t√©cnico da loja ser√° notificado sobre seu caso para agilizar o atendimento! 

**Alguma d√∫vida sobre a loja?**`,
            ticketId: ticketId,
            status: 'transferred_to_physical_store',
            freshdeskUpdated: freshdeskUpdate.success
          });
          
        } else {
          console.log(`[TOOL] Cliente de Joinville prefere coleta`);
          
          // Processar coleta para Joinville
          const problemSummary = generateProblemSummary(problemTag);
          const freshdeskUpdate = await updateFreshdeskForCollectionChoice(
            ticketId, customerAddress, customerData, problemTag, problemSummary
          );

          return JSON.stringify({
            success: true,
            action: "collection_confirmed",
            choice: "collection",
            message: `üì¶ **COLETA GRATUITA CONFIRMADA**

Sem problemas! Organizaremos a coleta em sua resid√™ncia.

**Confirme seus dados:**
üìç **Endere√ßo:** ${customerAddress.fullAddress}

**Cronograma da coleta:**
‚Ä¢ **Contato:** Nossa log√≠stica ligar√° em at√© 24h
‚Ä¢ **Coleta:** Realizada em at√© 3 dias √∫teis
‚Ä¢ **Hor√°rio:** 8h √†s 18h (segunda a sexta)
‚Ä¢ **Diagn√≥stico:** 1-2 dias √∫teis ap√≥s recebimento
‚Ä¢ **Reparo:** 3-5 dias √∫teis
‚Ä¢ **Retorno:** Frete gr√°tis para sua casa

**Prepara√ß√£o:**
‚úÖ Mantenha equipamento embalado/protegido
‚úÖ Retire cabos desnecess√°rios
‚úÖ Tenha documento com foto em m√£os

Um especialista entrar√° em contato para organizar todos os detalhes! üöö`,
            ticketId: ticketId,
            status: 'transferred_to_human_collection',
            freshdeskUpdated: freshdeskUpdate.success
          });
        }
        
      } else if (currentContext === "other_region_choice") {
        // Analisar escolha para outras regi√µes (voucher vs coleta)
        const problemSummary = generateProblemSummary(problemTag);
        
        if (analysis.prefersVoucher) {
          console.log(`[TOOL] Cliente de outra regi√£o escolhe voucher`);
          
          const freshdeskUpdate = await updateFreshdeskForVoucherChoice(
            ticketId, customerAddress, customerData, problemTag, problemSummary
          );

          return JSON.stringify({
            success: true,
            action: "voucher_requested",
            choice: "voucher",
            message: `üé´ **VOUCHER DE R$ 150,00 CONFIRMADO**

**Detalhes do voucher:**
üí∞ **Valor:** R$ 150,00
üìÑ **Processo:** Reembolso ap√≥s apresenta√ß√£o da nota fiscal
üè• **Onde usar:** Qualquer assist√™ncia t√©cnica credenciada

**Pr√≥ximos passos:**
‚Ä¢ Nossa equipe entrar√° em contato em at√© 2 horas
‚Ä¢ Voc√™ receber√° lista de assist√™ncias credenciadas na sua regi√£o
‚Ä¢ Orienta√ß√µes completas sobre o processo de reembolso
‚Ä¢ Suporte durante todo o processo

**Como funciona o reembolso:**
1. Leve seu equipamento na assist√™ncia escolhida
2. Apresente seu documento e explique o problema
3. Ap√≥s o reparo, solicite nota fiscal em seu nome
4. Envie a nota para reembolso

Um especialista cuidar√° do atendimento a partir de agora.`,
            ticketId: ticketId,
            status: 'transferred_to_human_voucher',
            freshdeskUpdated: freshdeskUpdate.success
          });
          
        } else {
          console.log(`[TOOL] Cliente de outra regi√£o escolhe coleta`);
          
          const freshdeskUpdate = await updateFreshdeskForCollectionChoice(
            ticketId, customerAddress, customerData, problemTag, problemSummary
          );

          return JSON.stringify({
            success: true,
            action: "collection_requested",
            choice: "collection",
            message: `üì¶ **COLETA GRATUITA CONFIRMADA**

Perfeita escolha! Coleta gratuita organizada.

**Confirme seus dados:**
üìç **Endere√ßo:** ${customerAddress.fullAddress}

**Est√° correto?** Se sim, nossa log√≠stica entrar√° em contato em at√© 24h.

**Cronograma completo:**
‚Ä¢ **Contato:** 24h para agendar
‚Ä¢ **Coleta:** 3 dias √∫teis ap√≥s agendamento
‚Ä¢ **Diagn√≥stico:** 1-2 dias √∫teis
‚Ä¢ **Reparo:** 3-5 dias √∫teis
‚Ä¢ **Retorno:** Frete gr√°tis

**Prepara√ß√£o:**
‚úÖ Embalar/proteger o equipamento
‚úÖ Retirar cabos desnecess√°rios
‚úÖ Ter documento com foto dispon√≠vel

**Total:** 7-10 dias √∫teis do in√≠cio ao fim

Um especialista humano organizar√° todos os detalhes da sua coleta! üööüíô`,
            ticketId: ticketId,
            status: 'transferred_to_human_collection',
            freshdeskUpdated: freshdeskUpdate.success
          });
        }
      }
      
    } catch (error) {
      console.error("[TOOL] Erro ao analisar resposta:", error);
      
      return JSON.stringify({
        success: false,
        message: "Erro interno. Transferindo para especialista.",
        error: error instanceof Error ? error.message : "Erro desconhecido",
      });
    }
  },
  {
    name: "analyzeCustomerResponse", 
    description: "Analisa resposta natural do cliente para determinar sua escolha entre as op√ß√µes oferecidas",
    schema: analyzeCustomerResponseSchema,
  }
);