import { tool } from "@langchain/core/tools";
import { z } from "zod";

const requestAddressSchema = z.object({
  threadId: z.string().describe("ID da thread/conversa"),
  problemTag: z.string().describe("Tag do problema que n√£o pode ser resolvido remotamente"),
  stepsAttempted: z.number().describe("N√∫mero de steps j√° tentados"),
  reason: z.string().optional().describe("Motivo pelo qual precisa do endere√ßo")
});

export const requestAddressTool = tool(
  async ({ threadId, problemTag, stepsAttempted, reason }) => {
    console.log(`[TOOL] Solicitando endere√ßo do cliente`);
    console.log(`[TOOL] Problema: ${problemTag} (${stepsAttempted} steps tentados)`);
    
    try {
      const message = `Como n√£o conseguimos resolver o problema remotamente ap√≥s ${stepsAttempted} tentativas, vou verificar op√ß√µes de atendimento para voc√™.

**Preciso do seu endere√ßo completo** para oferecer a melhor solu√ß√£o:

üìç **Por favor, informe:**
‚Ä¢ Rua
‚Ä¢ N√∫mero
‚Ä¢ Cidade
‚Ä¢ Estado
‚Ä¢ CEP

Com essas informa√ß√µes, posso verificar se h√°:
‚Ä¢ Loja f√≠sica pr√≥xima para atendimento presencial
‚Ä¢ Voucher para assist√™ncia t√©cnica local
‚Ä¢ Coleta gratuita do equipamento

**Qual √© o seu endere√ßo?**`;

      return JSON.stringify({
        success: true,
        message: message,
        action: "request_address",
        problemTag: problemTag,
        stepsAttempted: stepsAttempted,
        waitingForAddress: true,
      });
      
    } catch (error) {
      console.error("[TOOL] Erro ao solicitar endere√ßo:", error);
      
      return JSON.stringify({
        success: false,
        message: "Erro interno. Um t√©cnico entrar√° em contato para resolver.",
        error: error instanceof Error ? error.message : "Erro desconhecido",
      });
    }
  },
  {
    name: "requestAddress",
    description: "Solicita endere√ßo do cliente quando procedimentos remotos n√£o resolveram o problema",
    schema: requestAddressSchema,
  }
);