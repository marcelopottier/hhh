import { Tool } from "langchain/tools";
import { EmbeddingService, SolutionResult } from "../services/embeddingService";
import db from "../config/database";

export class SearchProceduresTool extends Tool {
  name = "searchProcedures";
  description = "Busca solu√ß√µes t√©cnicas e cria uma resposta simplificada e direta para o cliente. Use quando o cliente reportar um problema t√©cnico.";

  private embeddingService: EmbeddingService;
  private openaiApiKey: string;

  constructor() {
    super();
    this.openaiApiKey = process.env.OPENAI_API_KEY || '';
    
    const pool = db.getPool();
    this.embeddingService = new EmbeddingService(pool, this.openaiApiKey);
  }

  async _call(input: string): Promise<string> {
    try {
      // Buscar solu√ß√µes usando busca sem√¢ntica
      const solutions = await this.embeddingService.buscarSolucoesSimilares(input, {
        max_results: 2,
        similarity_threshold: 0.6
      });
      
      if (solutions.length === 0) {
        return "N√£o encontrei uma solu√ß√£o espec√≠fica para este problema. Vou conectar voc√™ com um t√©cnico especializado para uma an√°lise mais detalhada.";
      }

      const bestSolution = solutions[0];
      
      // Analisar o que o cliente j√° tentou
      const clienteTentou = this.analisarTentativasCliente(input);
      
      // Compilar todas as informa√ß√µes da solu√ß√£o
      const solutionData = this.compilarDadosSolucao(bestSolution, clienteTentou);
      
      // Usar LLM para criar uma resposta simplificada
      const simplifiedResponse = await this.simplificarComLLM(input, solutionData, clienteTentou);
      
      return simplifiedResponse;
      
    } catch (error) {
      console.error("Erro ao buscar solu√ß√µes:", error);
      return "Ocorreu um erro ao buscar a solu√ß√£o. Vou conectar voc√™ com um t√©cnico especializado imediatamente.";
    }
  }

  // ... resto dos m√©todos iguais ...
  private compilarDadosSolucao(solution: SolutionResult, tentativasCliente: string[]): string {
    let compiledData = `SOLU√á√ÉO ENCONTRADA: ${solution.title}\n`;
    compiledData += `CATEGORIA: ${solution.category}\n`;
    compiledData += `RELEV√ÇNCIA: ${(solution.similarity_score * 100).toFixed(1)}%\n`;
    
    if (solution.difficulty) {
      compiledData += `DIFICULDADE: ${solution.difficulty}/5\n`;
    }
    
    if (solution.estimated_time_minutes) {
      compiledData += `TEMPO ESTIMADO: ${solution.estimated_time_minutes} minutos\n`;
    }
    
    compiledData += `\n`;

    // Introdu√ß√£o
    if (solution.introduction) {
      compiledData += `INTRODU√á√ÉO:\n${solution.introduction}\n\n`;
    }

    // Descri√ß√£o do problema
    if (solution.problem_description) {
      compiledData += `DESCRI√á√ÉO DO PROBLEMA:\n${solution.problem_description}\n\n`;
    }

    // Procedimentos detalhados
    if (solution.procedures && solution.procedures.length > 0) {
      compiledData += `PROCEDIMENTOS DETALHADOS:\n`;
      
      const sortedProcedures = [...solution.procedures].sort((a, b) => a.order - b.order);
      
      sortedProcedures.forEach(proc => {
        compiledData += `\nPASSO ${proc.order} (${proc.category?.toUpperCase() || 'GERAL'}):\n`;
        compiledData += `${proc.instruction}\n`;
        
        if (proc.safety_warning) {
          compiledData += `‚ö†Ô∏è ATEN√á√ÉO: ${proc.safety_warning}\n`;
        }
        
        if (proc.estimated_minutes) {
          compiledData += `Tempo: ${proc.estimated_minutes} minutos\n`;
        }
      });
    } else {
      // Usar conte√∫do completo se n√£o houver procedimentos estruturados
      compiledData += `SOLU√á√ÉO COMPLETA:\n${solution.content}\n`;
    }

    // Ferramentas necess√°rias
    if (solution.tools_required && solution.tools_required.length > 0) {
      compiledData += `\nFERRAMENTAS NECESS√ÅRIAS:\n${solution.tools_required.join(', ')}\n`;
    }

    // Recursos de apoio
    if (solution.resources && solution.resources.length > 0) {
      compiledData += `\nRECURSOS DE APOIO:\n`;
      solution.resources.forEach(resource => {
        compiledData += `- ${resource.title}`;
        if (resource.url) {
          compiledData += `: ${resource.url}`;
        }
        if (resource.description) {
          compiledData += ` (${resource.description})`;
        }
        compiledData += `\n`;
      });
    }

    // Mensagem de encerramento
    if (solution.closing_message) {
      compiledData += `\nMENSAGEM FINAL:\n${solution.closing_message}\n`;
    }

    // Pr√≥ximos passos
    if (solution.next_steps && solution.next_steps.length > 0) {
      compiledData += `\nPR√ìXIMOS PASSOS DISPON√çVEIS:\n${solution.next_steps.join(', ')}\n`;
    }

    return compiledData;
  }

  private async simplificarComLLM(
    userInput: string, 
    solutionData: string, 
    tentativasCliente: string[]
  ): Promise<string> {
    const prompt = `Voc√™ √© um assistente t√©cnico especialista. Sua tarefa √© criar uma resposta COMPLETA com TODOS os passos necess√°rios para resolver o problema.

PROBLEMA DO CLIENTE:
"${userInput}"

${tentativasCliente.length > 0 ? `O CLIENTE J√Å TENTOU: ${tentativasCliente.join(', ')}` : ''}

DADOS T√âCNICOS DA SOLU√á√ÉO:
${solutionData}

INSTRU√á√ïES CR√çTICAS:
1. INCLUA TODOS OS PASSOS da solu√ß√£o - n√£o apenas o primeiro
2. Use linguagem simples e direta
3. Numere os passos de 1 at√© o final
4. Mantenha cada passo conciso mas completo
5. Se o cliente j√° tentou algo, mencione e pule esses passos
6. Inclua avisos de seguran√ßa importantes com ‚ö†Ô∏è
7. Termine pedindo para testar e informar o resultado
8. N√ÉO limite a 300 palavras - inclua TUDO que √© necess√°rio
9. Organize logicamente: prepara√ß√£o ‚Üí testes ‚Üí solu√ß√µes avan√ßadas

FORMATO OBRIGAT√ìRIO:
- Reconhecimento do problema
- Lista COMPLETA numerada (1, 2, 3... at√© o fim)
- Todos os avisos de seguran√ßa
- Pedido de feedback final
- Links se houver

IMPORTANTE: O cliente precisa de TODOS os passos de uma vez, n√£o apenas o primeiro. Inclua toda a sequ√™ncia de troubleshooting.

Resposta COMPLETA:`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um assistente t√©cnico que fornece solu√ß√µes COMPLETAS com todos os passos necess√°rios. Nunca forne√ßa apenas parte da solu√ß√£o.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 1500,  // Aumentado para permitir resposta completa
          temperature: 0.2   // Mais determin√≠stico
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API Error: ${response.status}`);
      }

      const data = await response.json() as {
        choices: { message: { content: string } }[]
      };
      console.log(`Resposta do LLM: ${data.choices[0].message.content}`);
      
      return data.choices[0].message.content.trim();
      
    } catch (error) {
      console.error('Erro ao simplificar com LLM:', error);
      
      return this.criarRespostaBasica(userInput, solutionData, tentativasCliente);
    }
  }

  private criarRespostaBasica(
    userInput: string, 
    solutionData: string, 
    tentativasCliente: string[]
  ): string {
    let response = `Vou te ajudar a resolver: "${userInput}"\n\n`;
    
    if (tentativasCliente.length > 0) {
      response += `Vi que voc√™ j√° tentou: ${tentativasCliente.join(', ')}\n\n`;
    }
    
    response += `Siga TODOS estes passos:\n\n`;
    
    // Extrair e incluir TODOS os passos do solutionData
    const lines = solutionData.split('\n');
    let stepNumber = 1;
    let inProcedures = false;
    
    for (const line of lines) {
      if (line.includes('PROCEDIMENTOS DETALHADOS:')) {
        inProcedures = true;
        continue;
      }
      
      if (line.includes('SOLU√á√ÉO COMPLETA:')) {
        inProcedures = true;
        continue;
      }
      
      if (inProcedures) {
        if (line.trim().startsWith('PASSO')) {
          const instruction = lines[lines.indexOf(line) + 1];
          if (instruction && instruction.trim()) {
            response += `${stepNumber}. ${instruction.trim()}\n\n`;
            stepNumber++;
          }
        } else if (line.includes('‚ö†Ô∏è')) {
          response += `${line.trim()}\n\n`;
        } else if (line.trim() && 
                   !line.includes('Tempo:') && 
                   !line.includes('FERRAMENTAS') &&
                   !line.includes('RECURSOS') &&
                   !line.startsWith('PASSO') &&
                   line.length > 20) {
          // Incluir instru√ß√µes completas
          response += `${stepNumber}. ${line.trim()}\n\n`;
          stepNumber++;
        }
      }
    }
    
    // Se n√£o conseguiu extrair passos estruturados, usar o conte√∫do completo
    if (stepNumber === 1) {
      const contentMatch = solutionData.match(/SOLU√á√ÉO COMPLETA:\n(.*?)(?:\n\n|$)/s);
      if (contentMatch) {
        const content = contentMatch[1].trim();
        const sentences = content.split(/[.!]\s+/).filter(s => s.length > 10);
        sentences.forEach((sentence, index) => {
          if (sentence.trim()) {
            response += `${index + 1}. ${sentence.trim()}.\n\n`;
          }
        });
      }
    }
    
    response += `‚ö†Ô∏è Desligue sempre o computador da tomada antes de mexer internamente.\n\n`;
    response += `Execute todos esses passos e me informe qual foi o resultado! üòä`;
    
    return response;
  }

  private analisarTentativasCliente(input: string): string[] {
    const tentativas: string[] = [];
    const inputLower = input.toLowerCase();
    
    const mapeamentoTentativas = {
      'trocar cabo': ['trocar cabo', 'troquei cabo', 'mudei cabo', 'testei cabo', 'cabo diferente'],
      'reiniciar': ['reiniciei', 'reiniciar', 'resetei', 'restart', 'reboot', 'religei'],
      'trocar mem√≥ria': ['trocar mem√≥ria', 'troquei mem√≥ria', 'mudei mem√≥ria', 'testei mem√≥ria'],
      'limpar mem√≥ria': ['limpar mem√≥ria', 'limpei mem√≥ria', 'limpeza', 'borracha'],
      'trocar slot': ['trocar slot', 'troquei slot', 'mudei slot'],
      'verificar fonte': ['verificar fonte', 'testei fonte', 'trocar fonte'],
      'outro monitor': ['outro monitor', 'testei monitor', 'trocar monitor'],
      'reset bios': ['reset bios', 'resetar bios', 'limpar bios', 'bateria'],
      'verificar cabos': ['verificar cabos', 'cabos', 'conex√µes'],
      'modo seguro': ['modo seguro', 'safe mode'],
      'atualizar driver': ['driver', 'atualizar'],
      'verificar temperatura': ['temperatura', 'cooler', 'ventilador', 'superaquecimento']
    };

    for (const [acao, palavrasChave] of Object.entries(mapeamentoTentativas)) {
      if (palavrasChave.some(palavra => inputLower.includes(palavra))) {
        tentativas.push(acao);
      }
    }

    return tentativas;
  }
}