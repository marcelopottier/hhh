import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { extractTicketId } from "./freshdeskUpdateTool";
import { generateProblemSummary, updateFreshdeskForCollectionChoice, updateFreshdeskForVoucherChoice } from "../helpers/generalHelper";

const processVoucherSimplifiedSchema = z.object({
  threadId: z.string().describe("ID da thread/conversa"),
  customerChoice: z.enum(["voucher", "coleta"]).describe("Escolha do cliente: voucher ou coleta"),
  customerAddress: z.object({
    street: z.string(),
    neighborhood: z.string(),
    cep: z.string(),
    complement: z.string().optional(),
    fullAddress: z.string()
  }).describe("Endere√ßo do cliente"),
  customerData: z.object({
    name: z.string().optional(),
    orderNumber: z.string().optional(),
    equipmentModel: z.string().optional(),
  }).optional(),
  problemTag: z.string().describe("Tag do problema"),
});

export const processVoucherSimplifiedTool = tool(
  async ({ threadId, customerChoice, customerAddress, customerData, problemTag }) => {
    console.log(`[TOOL] Processando escolha: ${customerChoice}`);
    
    try {
      const ticketId = extractTicketId(threadId);
      const problemSummary = generateProblemSummary(problemTag);
      
      if (customerChoice === "voucher") {
        // Cliente escolheu voucher - transferir para humano
        const freshdeskUpdate = await updateFreshdeskForVoucherChoice(
          ticketId,
          customerAddress,
          customerData,
          problemTag,
          problemSummary
        );

        const message = `‚úÖ **VOUCHER DE R$ 150,00 SOLICITADO**

Perfeito! Voc√™ escolheu o voucher de reembolso.

**Pr√≥ximos passos:**
‚Ä¢ Nossa equipe entrar√° em contato em at√© 2 horas
‚Ä¢ Voc√™ receber√° orienta√ß√µes sobre assist√™ncias credenciadas
‚Ä¢ Ap√≥s o reparo, envie a nota fiscal para reembolso

**Valor:** R$ 150,00
**Processo:** Reembolso por transfer√™ncia/PIX

Um especialista humano cuidar√° do seu caso a partir de agora! üíô`;

        return JSON.stringify({
          success: true,
          message: message,
          action: 'voucher_requested',
          status: 'transferred_to_human_voucher',
          freshdeskUpdated: freshdeskUpdate.success,
          ticketId: ticketId,
        });
        
      } else {
        // Cliente escolheu coleta - confirmar endere√ßo e transferir
        const freshdeskUpdate = await updateFreshdeskForCollectionChoice(
          ticketId,
          customerAddress,
          customerData,
          problemTag,
          problemSummary
        );

        const message = `Coleta gratuita confirmada.

**Confirme seus dados:**
**Endere√ßo:** ${customerAddress.fullAddress}

**Est√° correto?** Se sim, nossa log√≠stica entrar√° em contato em at√© 24h para agendar a coleta.

**Cronograma:**
‚Ä¢ Contato: 24h
‚Ä¢ Coleta: 3 dias √∫teis
‚Ä¢ Reparo: 5-7 dias √∫teis  
‚Ä¢ Retorno: Frete gr√°tis`;

        return JSON.stringify({
          success: true,
          message: message,
          action: 'collection_requested',
          status: 'transferred_to_human_collection',
          freshdeskUpdated: freshdeskUpdate.success,
          ticketId: ticketId,
          addressToConfirm: customerAddress.fullAddress,
        });
      }
      
    } catch (error) {
      console.error("[TOOL] Erro ao processar escolha:", error);
      
      return JSON.stringify({
        success: false,
        message: "Erro interno. Transferindo para especialista.",
        error: error instanceof Error ? error.message : "Erro desconhecido",
      });
    }
  },
  {
    name: "processVoucherSimplified",
    description: "Processa escolha do cliente entre voucher ou coleta para regi√µes fora de Joinville e transfere para humano",
    schema: processVoucherSimplifiedSchema,
  }
);